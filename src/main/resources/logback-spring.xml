<?xml version="1.0" encoding="UTF-8"?>
<!--scan: 当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true-->
<!--scanPeriod: 设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位时毫秒，当scan为true时，此属性生效，默认时间间隔为1分钟-->
<configuration scan="true" scanPeriod="10 seconds">
    <!-- 此配置用于获取yml中定义的变量-->
    <include resource="org/springframework/boot/logging/logback/base.xml" />
    <contextName>logback</contextName>
    <!-- name的值是变量的名称，value的值是变量定义的值，通过定义的值会被插入到logging上下文中。定义变量后，可以使用"${}" 来使用yml中定义的变量，打包后在项目的根目录生成日志文件-->
<!--    <property name="log.path" value="${}/logs" />-->
    <property name="log.path" value="D://logs" />
    <!-- 彩色日志-->
    <!-- 彩色日志依赖的渲染类-->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 [%-5p] %d{yyyy-MM-dd HH:mm:ss.SSS} method:%l%n%m%n -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />

    <!-- ===================================输出到控制台================================-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 此日志appender是为开发使用，只配置最低级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
            <level>debug</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <!-- 设置字符集-->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 输出到文件-->
    <!-- ============================时间滚动输出level为DEBUG日志========================-->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender" >
        <!-- 正在记录的日志文件的路径及文件名-->
        <file>${log.path}/log_debog.log</file>
        <!-- 日志文件输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <!-- 设置字符集-->
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy" >
            <!-- 日志归档-->
            <fileNamePattern>${log.path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数-->
            <maxHistory>15</maxHistory>
            <!-- 所有的日志文件最大10GB，超过就会删除旧的日志文件-->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <!-- 此日治文件只记录debug级别的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ============================时间滚动输出level为INFO日志==========================-->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender" >
        <!-- 正在记录的日志文件的路径及文件名-->
        <file>${log.path}/log_info.log</file>
        <!-- 日志文件输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <!-- 设置字符集-->
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy" >
            <!-- 日志归档-->
            <fileNamePattern>${log.path}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数-->
            <maxHistory>15</maxHistory>
            <!-- 所有的日志文件最大10GB，超过就会删除旧的日志文件-->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <!-- 此日治文件只记录info级别的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ============================时间滚动输出level为WARN日志===========================-->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender" >
        <!-- 正在记录的日志文件的路径及文件名-->
        <file>${log.path}/log_warn.log</file>
        <!-- 日志文件输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <!-- 设置字符集-->
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy" >
            <!-- 日志归档-->
            <fileNamePattern>${log.path}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数-->
            <maxHistory>15</maxHistory>
            <!-- 所有的日志文件最大10GB，超过就会删除旧的日志文件-->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <!-- 此日治文件只记录warn级别的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ============================时间滚动输出level为ERROR日志==========================-->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender" >
        <!-- 正在记录的日志文件的路径及文件名-->
        <file>${log.path}/log_error.log</file>
        <!-- 日志文件输出格式-->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</pattern>
            <!-- 设置字符集-->
            <charset>UTF-8</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy" >
            <!-- 日志归档-->
            <fileNamePattern>${log.path}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 日志文件保留天数-->
            <maxHistory>15</maxHistory>
            <!-- 所有的日志文件最大10GB，超过就会删除旧的日志文件-->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <!-- 此日治文件只记录error级别的日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>error</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- ============================开发环境下：打印到控制台==============================-->
    <springProfile name="dev">
        <logger name="demo.dao" level="debug" />
        <!-- 用来指定最基础的日志级别-->
        <root level="info">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="DEBUG_FILE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="WARN_FILE" />
            <appender-ref ref="ERROR_FILE" />
        </root>
    </springProfile>

</configuration>